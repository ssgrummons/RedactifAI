services:
  postgres:
    image: postgres:17
    environment:
      POSTGRES_DB: redactifai
      POSTGRES_USER: redactifai
      POSTGRES_PASSWORD: redactifai_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U redactifai"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  redis:
    image: redis:8-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
  
  create_buckets:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin123;
      /usr/bin/mc mb myminio/redactifai-phi-uploads || true;
      /usr/bin/mc mb myminio/redactifai-clean-outputs || true;
      exit 0;
      "
  
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      # Database
      DB_USER: redactifai
      DB_PASSWORD: redactifai_password
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: redactifai
      
      # Celery
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      
      # Storage
      STORAGE_BACKEND: s3
      STORAGE_S3_ENDPOINT_URL: http://minio:9000
      STORAGE_S3_ACCESS_KEY: minioadmin
      STORAGE_S3_SECRET_KEY: minioadmin123
      STORAGE_S3_REGION: us-east-1
      STORAGE_PHI_BUCKET: redactifai-phi-uploads
      STORAGE_CLEAN_BUCKET: redactifai-clean-outputs
      
      # Provider (mock for local dev, azure/aws for production)
      DEFAULT_PROVIDER: mock
      DEFAULT_MASKING_LEVEL: safe_harbor
      
      # API Settings
      MAX_FILE_SIZE_MB: 50
      LOG_LEVEL: INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      create_buckets:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
  
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      # Database
      DB_USER: redactifai
      DB_PASSWORD: redactifai_password
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: redactifai
      
      # Celery
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/1
      CELERY_TASK_MAX_RETRIES: 3
      
      # Storage
      STORAGE_BACKEND: s3
      STORAGE_S3_ENDPOINT_URL: http://minio:9000
      STORAGE_S3_ACCESS_KEY: minioadmin
      STORAGE_S3_SECRET_KEY: minioadmin123
      STORAGE_S3_REGION: us-east-1
      STORAGE_PHI_BUCKET: redactifai-phi-uploads
      STORAGE_CLEAN_BUCKET: redactifai-clean-outputs
      
      # Provider
      DEFAULT_PROVIDER: mock
      DEFAULT_MASKING_LEVEL: safe_harbor
      
      # Processing
      MAX_FILE_SIZE_MB: 50
      LOG_LEVEL: INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      create_buckets:
        condition: service_completed_successfully
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data: